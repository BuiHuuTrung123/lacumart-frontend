// src/components/Admin/ProductForm/ProductForm.jsx
import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import {
  Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, Grid,
  FormControl, InputLabel, Select, MenuItem, Box, Typography, Paper, Chip,
  InputAdornment, Tooltip, IconButton, Card, CardMedia, Alert, CircularProgress,
} from '@mui/material';
import {
  FitnessCenter, LocalOffer, Inventory, AttachMoney, CloudUpload,
  Delete, AddPhotoAlternate, Star,
} from '@mui/icons-material';
import { toast } from 'react-toastify';
import VisuallyHiddenInput from '~/components/Form/VisuallyHiddenInput';
import FieldErrorAlert from '~/components/Form/FieldErrorAlert';
import { createNewProductdAPI } from '~/apis';

// Constants
const FIELD_REQUIRED_MESSAGE = 'Tr∆∞·ªùng n√†y l√† b·∫Øt bu·ªôc';

const MAIN_CATEGORIES = {
  WHEY_PROTEIN: 'Whey Protein',
  MASS_GAINER: 'S·ªØa tƒÉng c√¢n',
  BCAA_AMINO: 'BCAA Amino Acids',
  STRENGTH: 'TƒÉng s·ª©c m·∫°nh',
  WEIGHT_LOSS: 'H·ªó tr·ª£ gi·∫£m c√¢n',
  VITAMINS: 'Vitamin kho√°ng ch·∫•t',
  FISH_OIL: 'D·∫ßu c√°',
  ACCESSORIES: 'Ph·ª• ki·ªán t·∫≠p gym'
};

const BRANDS = [
  'Redcon1', 'BPI Sports', 'Ostrovit', 'Ultimate Nutrition', 'Labrada',
  'Optimum Nutrition', 'Quaker', 'VitaXtrong', 'Now Foods', 'JNX Sports',
  'Biotech USA', 'Puritan\'s Pride', 'Doctor\'s Best', 'Webber Naturals', 'Scivation'
];

const SUB_CATEGORIES = {
  [MAIN_CATEGORIES.WHEY_PROTEIN]: ['Whey Protein Isolate', 'Whey Protein Blend', 'Hydrolyzed Whey Protein', 'Casein Protein', 'Meal Replacement', 'Protein Bar'],
  [MAIN_CATEGORIES.MASS_GAINER]: [],
  [MAIN_CATEGORIES.BCAA_AMINO]: ['Essential Amino Acids'],
  [MAIN_CATEGORIES.STRENGTH]: ['Pre Workout', 'Beta Alanine', 'Creatine'],
  [MAIN_CATEGORIES.WEIGHT_LOSS]: ['Fat Burn', 'CLA', 'L-Carnitine', 'Y·∫øn m·∫°ch'],
  [MAIN_CATEGORIES.VITAMINS]: ['MultiVitamin', 'Astaxanthin', 'Testosterone', 'X∆∞∆°ng kh·ªõp', 'ZMA'],
  [MAIN_CATEGORIES.FISH_OIL]: [],
  [MAIN_CATEGORIES.ACCESSORIES]: ['B√¨nh l·∫Øc', 'D√¢y kh√°ng l·ª±c', 'Ph·ª• ki·ªán ri√™ng c·ªßa lacu', 'Ph·ª• ki·ªán Harbinger']
};

const ProductForm = ({ open, product, onClose, onSave }) => {
 
     
  const [imagePreviews, setImagePreviews] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const { control, handleSubmit, formState: { errors }, watch, setValue, reset } = useForm({
    defaultValues: {
      name: '',
      description: '',
      shortDescription: '',
      mainCategory: '',
      subCategory: '',
      brand: '',
      price: { current: '', original: '', discount: 0 },
      stock: { quantity: '', status: 'in_stock' }
    }
  });

  const watchPriceOriginal = watch('price.original');
  const watchPriceCurrent = watch('price.current');
  const watchMainCategory = watch('mainCategory');

  // Auto calculate discount
  useEffect(() => {
    const original = parseFloat(watchPriceOriginal) || 0;
    const current = parseFloat(watchPriceCurrent) || 0;
    
    if (original > 0 && current > 0) {
      const discount = Math.round(((original - current) / original) * 100);
      setValue('price.discount', discount);
    } else {
      setValue('price.discount', 0);
    }
  }, [watchPriceOriginal, watchPriceCurrent, setValue]);

  // Auto generate slug
  useEffect(() => {
    const name = watch('name');
    if (name) {
      const slug = name.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');
      setValue('slug', slug);
    }
  }, [watch('name'), setValue]);

  // Reset form
  useEffect(() => {
    if (open) {
      if (product) {
        reset({
          ...product,
          price: {
            current: product.price?.current || '',
            original: product.price?.original || '',
            discount: product.price?.discount || 0
          },
          stock: {
            quantity: product.stock?.quantity || '',
            status: product.stock?.status || 'in_stock'
          }
        });
        setImagePreviews(product.images || []);
      } else {
        reset();
        setImagePreviews([]);
      }
    }
  }, [open, product, reset]);

  // Image handlers
  const handleImageUpload = (event) => {
    const files = Array.from(event.target.files);
    const newImagePreviews = files.map(file => ({
      url: URL.createObjectURL(file),
      alt: `Product Image ${Date.now()}`,
      isPrimary: imagePreviews.length === 0,
      file: file
    }));
    setImagePreviews(prev => [...prev, ...newImagePreviews]);
    event.target.value = '';
  };

  const handleRemoveImage = (index) => {
    setImagePreviews(prev => {
      const newPreviews = prev.filter((_, i) => i !== index);
      if (prev[index].isPrimary && newPreviews.length > 0) {
        newPreviews[0].isPrimary = true;
      }
      return newPreviews;
    });
  };

  const handleSetPrimary = (index) => {
    setImagePreviews(prev => prev.map((img, i) => ({
      ...img,
      isPrimary: i === index
    })));
  };

  const getAvailableSubCategories = () => SUB_CATEGORIES[watchMainCategory] || [];

  // Number input handler - ch·ªâ cho ph√©p nh·∫≠p s·ªë
  const handleNumberInput = (field, value) => {
    // Ch·ªâ cho ph√©p s·ªë v√† d·∫•u ch·∫•m th·∫≠p ph√¢n
    const numericValue = value.replace(/[^\d.]/g, '');
    // Ch·ªâ cho ph√©p m·ªôt d·∫•u ch·∫•m th·∫≠p ph√¢n
    const parts = numericValue.split('.');
    if (parts.length > 2) return;
    
    field.onChange(numericValue);
  };

  // Submit handler
  const submitCreateNewProduct = async (data) => {
    if (imagePreviews.length === 0) {
      toast.error('Vui l√≤ng upload √≠t nh·∫•t m·ªôt ·∫£nh s·∫£n ph·∫©m');
      return;
    }

    // Validate s·ªë
    const currentPrice = parseFloat(data.price.current);
    const originalPrice = parseFloat(data.price.original);
    const stockQuantity = parseFloat(data.stock.quantity);

    if (!currentPrice || currentPrice <= 0) {
      toast.error('Gi√° b√°n ph·∫£i l√† s·ªë l·ªõn h∆°n 0');
      return;
    }

    if (!originalPrice || originalPrice <= 0) {
      toast.error('Gi√° g·ªëc ph·∫£i l√† s·ªë l·ªõn h∆°n 0');
      return;
    }

    if (!stockQuantity || stockQuantity < 0) {
      toast.error('S·ªë l∆∞·ª£ng t·ªìn kho ph·∫£i l√† s·ªë l·ªõn h∆°n ho·∫∑c b·∫±ng 0');
      return;
    }

    setIsSubmitting(true);

    try {
      const finalFormData = {
        ...data,
        price: {
          current: currentPrice,
          original: originalPrice,
          discount: data.price.discount
        },
        stock: {
          quantity: stockQuantity,
          status: data.stock.status
        },
        images: imagePreviews.map(img => ({
          url: img.url,
          alt: img.alt || data.name,
          isPrimary: img.isPrimary
        }))
      };

      await createNewProductdAPI(finalFormData);
      await onSave(finalFormData);
      toast.success(product ? 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng! üéâ' : 'Th√™m s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng! üéâ');
    } catch (error) {
      toast.error('L·ªói khi l∆∞u s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const onError = (errors) => {
    console.log('Form errors:', errors);
    toast.error('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin form');
  };

  return (
    <Dialog open={open} onClose={isSubmitting ? undefined : onClose} maxWidth="lg" fullWidth
      PaperProps={{ sx: { borderRadius: 3, background: 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)', maxHeight: '90vh', overflow: 'auto' } }}>
      
      <DialogTitle sx={{ background: 'linear-gradient(135deg, #ff5722, #ff8c42)', color: 'white', textAlign: 'center', py: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2 }}>
          <FitnessCenter sx={{ fontSize: 32 }} />
          <Typography variant="h4" fontWeight={800}>
            {product ? 'C·∫¨P NH·∫¨T S·∫¢N PH·∫®M' : 'TH√äM S·∫¢N PH·∫®M M·ªöI'}
          </Typography>
        </Box>
      </DialogTitle>

      <form onSubmit={handleSubmit(submitCreateNewProduct, onError)}>
        <DialogContent sx={{ p: 4 }}>
          <Grid container spacing={4}>

            {/* Images Section */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3, borderRadius: 3, background: 'white' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                  <AddPhotoAlternate sx={{ color: '#ff5722', fontSize: 28 }} />
                  <Typography variant="h5" fontWeight={700}>H√åNH ·∫¢NH S·∫¢N PH·∫®M</Typography>
                </Box>
                <Box sx={{ mb: 3 }}>
                  <Button component="label" variant="outlined" startIcon={<CloudUpload />}
                    sx={{ borderRadius: 2, fontWeight: 600, borderColor: '#ff5722', color: '#ff5722',
                      '&:hover': { backgroundColor: 'rgba(255, 87, 34, 0.1)', borderColor: '#e65100' } }}>
                    T·∫¢I ·∫¢NH L√äN
                    <VisuallyHiddenInput type="file" multiple accept="image/*" onChange={handleImageUpload} />
                  </Button>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    Ch·ªçn nhi·ªÅu ·∫£nh ƒë·ªÉ upload. ·∫¢nh ƒë·∫ßu ti√™n s·∫Ω l√† ·∫£nh ch√≠nh.
                  </Typography>
                </Box>

                {imagePreviews.length > 0 && (
                  <Grid container spacing={2}>
                    {imagePreviews.map((img, index) => (
                      <Grid item xs={6} sm={4} md={3} key={index}>
                        <Card sx={{ position: 'relative', border: img.isPrimary ? '2px solid #ff5722' : '1px solid #e0e0e0', borderRadius: 2, overflow: 'hidden' }}>
                          <CardMedia component="img" height="120" image={img.url} alt={img.alt} sx={{ objectFit: 'cover' }} />
                          {img.isPrimary && <Chip label="·∫¢nh ch√≠nh" size="small" sx={{ position: 'absolute', top: 8, left: 8, backgroundColor: '#ff5722', color: 'white', fontWeight: 600, fontSize: '10px' }} />}
                          <Box sx={{ position: 'absolute', top: 8, right: 8, display: 'flex', gap: 0.5 }}>
                            {!img.isPrimary && (
                              <Tooltip title="ƒê·∫∑t l√†m ·∫£nh ch√≠nh">
                                <IconButton size="small" onClick={() => handleSetPrimary(index)} sx={{ backgroundColor: 'rgba(255,255,255,0.9)', '&:hover': { backgroundColor: 'white' } }}>
                                  <Star sx={{ fontSize: 16, color: '#ffc107' }} />
                                </IconButton>
                              </Tooltip>
                            )}
                            <Tooltip title="X√≥a ·∫£nh">
                              <IconButton size="small" onClick={() => handleRemoveImage(index)} sx={{ backgroundColor: 'rgba(255,255,255,0.9)', '&:hover': { backgroundColor: 'white', color: '#e53935' } }}>
                                <Delete sx={{ fontSize: 16 }} />
                              </IconButton>
                            </Tooltip>
                          </Box>
                        </Card>
                      </Grid>
                    ))}
                  </Grid>
                )}

                {imagePreviews.length === 0 && <Alert severity="warning" sx={{ borderRadius: 2 }}>Vui l√≤ng upload √≠t nh·∫•t m·ªôt ·∫£nh s·∫£n ph·∫©m</Alert>}
              </Paper>
            </Grid>

            {/* Basic Information */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3, borderRadius: 3, background: 'white' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                  <Inventory sx={{ color: '#ff5722', fontSize: 28 }} />
                  <Typography variant="h5" fontWeight={700}>TH√îNG TIN C∆† B·∫¢N</Typography>
                </Box>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Controller name="name" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE, minLength: 3 }} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="T√™n s·∫£n ph·∫©m" error={!!errors.name} 
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="name" />
                  </Grid>
                  <Grid item xs={12}>
                    <Controller name="shortDescription" control={control} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="M√¥ t·∫£ ng·∫Øn" multiline rows={2} 
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Controller name="description" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE, minLength: 10 }} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="M√¥ t·∫£ chi ti·∫øt" multiline rows={4} error={!!errors.description} 
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="description" />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Category & Brand */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3, borderRadius: 3, background: 'white' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                  <LocalOffer sx={{ color: '#ff5722', fontSize: 28 }} />
                  <Typography variant="h5" fontWeight={700}>DANH M·ª§C & TH∆Ø∆†NG HI·ªÜU</Typography>
                </Box>
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Controller name="mainCategory" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <FormControl fullWidth error={!!errors.mainCategory} sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}>
                          <InputLabel>Danh m·ª•c ch√≠nh</InputLabel>
                          <Select {...field} label="Danh m·ª•c ch√≠nh" onChange={(e) => { field.onChange(e); setValue('subCategory', ''); }}>
                            {Object.values(MAIN_CATEGORIES).map((category) => (
                              <MenuItem key={category} value={category}>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  <FitnessCenter sx={{ fontSize: 18, color: '#ff5722' }} />
                                  {category}
                                </Box>
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="mainCategory" />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Controller name="subCategory" control={control} 
                      render={({ field }) => (
                        <FormControl fullWidth sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}>
                          <InputLabel>Danh m·ª•c ph·ª•</InputLabel>
                          <Select {...field} label="Danh m·ª•c ph·ª•" disabled={!watchMainCategory || getAvailableSubCategories().length === 0}>
                            {getAvailableSubCategories().map((subCat) => (
                              <MenuItem key={subCat} value={subCat}>{subCat}</MenuItem>
                            ))}
                            {getAvailableSubCategories().length === 0 && (
                              <MenuItem value="" disabled>Kh√¥ng c√≥ danh m·ª•c ph·ª•</MenuItem>
                            )}
                          </Select>
                        </FormControl>
                      )} 
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Controller name="brand" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <FormControl fullWidth error={!!errors.brand} sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}>
                          <InputLabel>Th∆∞∆°ng hi·ªáu</InputLabel>
                          <Select {...field} label="Th∆∞∆°ng hi·ªáu">
                            {BRANDS.map((brand) => (
                              <MenuItem key={brand} value={brand}>
                                <Chip label={brand} size="small" variant="outlined" sx={{ borderColor: '#ff5722', color: '#ff5722' }} />
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="brand" />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Price */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3, borderRadius: 3, background: 'white' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                  <AttachMoney sx={{ color: '#ff5722', fontSize: 28 }} />
                  <Typography variant="h5" fontWeight={700}>GI√Å C·∫¢</Typography>
                </Box>
                <Grid container spacing={3}>
                  <Grid item xs={12} md={4}>
                    <Controller name="price.original" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="Gi√° g·ªëc" error={!!errors.price?.original} 
                          InputProps={{ startAdornment: <InputAdornment position="start">‚Ç´</InputAdornment> }}
                          onChange={(e) => handleNumberInput(field, e.target.value)}
                          placeholder="0"
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="price.original" />
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Controller name="price.current" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="Gi√° b√°n" error={!!errors.price?.current} 
                          InputProps={{ startAdornment: <InputAdornment position="start">‚Ç´</InputAdornment> }}
                          onChange={(e) => handleNumberInput(field, e.target.value)}
                          placeholder="0"
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="price.current" />
                  </Grid>
                  <Grid item xs={12} md={4}>
                    <Controller name="price.discount" control={control} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="Gi·∫£m gi√°" type="number" 
                          InputProps={{ readOnly: true, endAdornment: <InputAdornment position="end">%</InputAdornment> }}
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2, backgroundColor: field.value > 0 ? 'rgba(76, 175, 80, 0.1)' : 'transparent' } }} />
                      )} 
                    />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Stock */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3, borderRadius: 3, background: 'white' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                  <Inventory sx={{ color: '#ff5722', fontSize: 28 }} />
                  <Typography variant="h5" fontWeight={700}>T·ªíN KHO</Typography>
                </Box>
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Controller name="stock.quantity" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <TextField {...field} fullWidth label="S·ªë l∆∞·ª£ng t·ªìn kho" error={!!errors.stock?.quantity} 
                          onChange={(e) => handleNumberInput(field, e.target.value)}
                          placeholder="0"
                          sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }} />
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="stock.quantity" />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Controller name="stock.status" control={control} rules={{ required: FIELD_REQUIRED_MESSAGE }} 
                      render={({ field }) => (
                        <FormControl fullWidth error={!!errors.stock?.status} sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}>
                          <InputLabel>Tr·∫°ng th√°i</InputLabel>
                          <Select {...field} label="Tr·∫°ng th√°i">
                            <MenuItem value="in_stock">üü¢ C√≤n h√†ng</MenuItem>
                            <MenuItem value="out_of_stock">üî¥ H·∫øt h√†ng</MenuItem>
                            <MenuItem value="low_stock">üü° S·∫Øp h·∫øt</MenuItem>
                            <MenuItem value="discontinued">‚ö´ Ng·ª´ng kinh doanh</MenuItem>
                          </Select>
                        </FormControl>
                      )} 
                    />
                    <FieldErrorAlert errors={errors} fieldName="stock.status" />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 3, background: 'rgba(255, 87, 34, 0.05)' }}>
          <Button onClick={onClose} variant="outlined" disabled={isSubmitting} 
            sx={{ borderRadius: 2, px: 4, py: 1, fontWeight: 700, borderColor: '#ff5722', color: '#ff5722', 
                  '&:hover': { backgroundColor: 'rgba(255, 87, 34, 0.1)', borderColor: '#e65100' } }}>
            H·ª¶Y B·ªé
          </Button>
          <Button type="submit" variant="contained" disabled={isSubmitting || imagePreviews.length === 0} 
            startIcon={isSubmitting ? <CircularProgress size={20} color="inherit" /> : null}
            sx={{ borderRadius: 2, px: 4, py: 1, fontWeight: 700, background: 'linear-gradient(135deg, #ff5722, #ff8c42)', 
                  '&:hover': { background: 'linear-gradient(135deg, #e65100, #ff5722)', transform: 'translateY(-2px)' }, 
                  transition: 'all 0.3s ease', '&:disabled': { background: '#ccc', transform: 'none' } }}>
            {isSubmitting ? 'ƒêANG X·ª¨ L√ù...' : (product ? 'C·∫¨P NH·∫¨T' : 'TH√äM M·ªöI')} üí™
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default ProductForm;